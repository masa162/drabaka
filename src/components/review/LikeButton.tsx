'use client';

import { useState, useEffect } from 'react';
import { LikeService } from '@/lib/supabase/likes';
import { getUserSession } from '@/lib/utils/session';

interface LikeButtonProps {
  reviewId: string;
  initialCount?: number;
  initialLiked?: boolean;
}

export default function LikeButton({ 
  reviewId, 
  initialCount = 0, 
  initialLiked = false 
}: LikeButtonProps) {
  const [likeCount, setLikeCount] = useState(initialCount);
  const [isLiked, setIsLiked] = useState(initialLiked);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [userSession, setUserSession] = useState<string>('');

  // „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„Éâ„Åß„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÇíÂèñÂæó
  useEffect(() => {
    const sessionId = getUserSession();
    setUserSession(sessionId);
    
    // ÂàùÊúüÁä∂ÊÖã„ÇíÂèñÂæó
    if (sessionId && sessionId !== 'server_session') {
      loadInitialState(sessionId);
    }
  }, [reviewId]);

  const loadInitialState = async (sessionId: string) => {
    try {
      const [count, hasLiked] = await Promise.all([
        LikeService.getLikeCount(reviewId),
        LikeService.hasUserLiked(reviewId, sessionId)
      ]);
      
      setLikeCount(count);
      setIsLiked(hasLiked);
    } catch (error) {
      console.error('Error loading initial like state:', error);
    }
  };

  const handleLikeClick = async () => {
    if (!userSession || userSession === 'server_session') {
      setError('„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÁÑ°Âäπ„Åß„Åô');
      return;
    }

    if (loading) return;

    setLoading(true);
    setError(null);

    try {
      const result = await LikeService.toggleLike(reviewId, userSession);
      
      setIsLiked(result.liked);
      setLikeCount(result.likeCount);
      
      // ÊàêÂäüÊôÇ„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºà2000Âπ¥‰ª£È¢®ÊºîÂá∫Ôºâ
      if (result.liked) {
        // „ÅÑ„ÅÑ„Å≠ËøΩÂä†ÊôÇ„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        const button = document.querySelector(`[data-review-id="${reviewId}"] .like-button`);
        if (button) {
          button.classList.add('like-animation');
          setTimeout(() => {
            button.classList.remove('like-animation');
          }, 600);
        }
      }
    } catch (error) {
      console.error('Error toggling like:', error);
      setError(error instanceof Error ? error.message : '„ÅÑ„ÅÑ„Å≠„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      
      // „Ç®„É©„ÉºÊôÇ„ÅØÂÖÉ„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
      setTimeout(() => setError(null), 3000);
    } finally {
      setLoading(false);
    }
  };

  const getLikeButtonText = () => {
    if (loading) return 'Âá¶ÁêÜ‰∏≠...';
    if (isLiked) return 'üëç Âêå„ÅòÁ©¥„ÅÆ„É†„Ç∏„Éä';
    return 'üëç Âêå„ÅòÁ©¥„ÅÆ„É†„Ç∏„Éä';
  };

  const getLikeButtonClass = () => {
    let className = 'retro-button like-button';
    if (isLiked) {
      className += ' retro-button--primary like-button--active';
    }
    if (loading) {
      className += ' like-button--loading';
    }
    return className;
  };

  return (
    <div className="like-button-container" data-review-id={reviewId}>
      <button 
        onClick={handleLikeClick}
        disabled={loading}
        className={getLikeButtonClass()}
        title={isLiked ? '„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åô' : '„ÅÑ„ÅÑ„Å≠„Åô„Çã'}
      >
        {getLikeButtonText()} ({likeCount})
      </button>
      
      {error && (
        <div className="like-error">
          <span className="error-text">‚ùå {error}</span>
        </div>
      )}
      
      {/* 2000Âπ¥‰ª£È¢®„ÅÆ„ÅÑ„ÅÑ„Å≠Êï∞Ë°®Á§∫ÊºîÂá∫ */}
      {likeCount > 0 && !loading && (
        <div className="like-stats">
          {likeCount >= 10 && (
            <span className="like-milestone sparkle">üî• ‰∫∫Ê∞ó„É¨„Éì„É•„ÉºÔºÅ</span>
          )}
          {likeCount >= 5 && likeCount < 10 && (
            <span className="like-milestone">‚≠ê Ê≥®ÁõÆ„É¨„Éì„É•„Éº</span>
          )}
        </div>
      )}
    </div>
  );
}